/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 2.16.0 from webgme on Fri Nov 17 2017 17:12:36 GMT-0600 (Central Standard Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of CPNMarkingGenerator.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin CPNMarkingGenerator.
     * @constructor
     */
    var CPNMarkingGenerator = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    CPNMarkingGenerator.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    CPNMarkingGenerator.prototype = Object.create(PluginBase.prototype);
    CPNMarkingGenerator.prototype.constructor = CPNMarkingGenerator;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    CPNMarkingGenerator.prototype.main = function (callback) {
   var self = this,
       activeNode = this.activeNode,
       core = this.core,
       logger = this.logger,
       cfsNode = core.getParent(activeNode),
       pipeNodes = [],
       artifact = self.blobClient.createArtifact('pipe-names');
  
  logger.debug('path:', core.getPath(activeNode));
  logger.info('name:', core.getAttribute(activeNode, 'name'));
  logger.warn('pos :', core.getRegistry(activeNode, 'position'));
  logger.error('guid:', core.getGuid(activeNode));
  
  function getOwnedPipes(node){
    let childIds = core.getChildrenRelids(node),
        ownedPipes = [];
    logger.debug(childIds);
    
    for (let i=0; i<childIds.length; i++){
      let child = core.getChild(node, childIds[i]),
          childMetaType = core.getMetaType(child),
          metaName = core.getAttribute(childMetaType, 'name');
      
      if (metaName == "PUB-Pipe" || metaName == "SUB-Pipe"){
        ownedPipes.push(child);
      }
    }
    
    return ownedPipes;
  }
  
  this.loadNodeMap()
    .then( function(nodeMap) {
    logger.debug('name:', core.getAttribute(cfsNode, 'name'));
    let childIds = core.getChildrenPaths(cfsNode);
    logger.debug(childIds);
    
    for (let i=0; i<childIds.length; i++){
      let child = nodeMap[ childIds[i] ];
      logger.info('name:', core.getAttribute(child, 'name'));
      pipeNodes = pipeNodes.concat( getOwnedPipes(child) );
    }
    
    let names = [];
    for (let i=0; i<pipeNodes.length; i++){
      logger.info('TTT name:', core.getAttribute(pipeNodes[i], 'name'));
      names.push( core.getAttribute(pipeNodes[i], 'name') );
      // Find all Message names here
    }
    let namesJSON = JSON.stringify(names);
    
    artifact.addFiles({'names.json': namesJSON})
      .then(function (fileMetadataHashes) {
      return artifact.save();
    })
      .then(function (artifactHash) {
      self.result.addArtifact(artifactHash);
      self.logger.info('Added complex artifact to blob-storage. Artifact Hash:', artifactHash);
      self.result.setSuccess(true);
      callback(null, self.result);
    })
      .catch(function (err){
      logger.error(err);
    callback(err);
    });
  })
    .catch( function(err) {
    logger.error(err);
    callback(err);
  });
}
    return CPNMarkingGenerator;
});
